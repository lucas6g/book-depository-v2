datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String        @id @default(uuid())
  name              String        
  username          String       @unique
  email             String       @unique
  password          String
  image             Image?        @relation(fields: [imageId], references: [id])
  imageId           String?
  verified          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  token             Token?
  role              Role          @default(USER)
  institution       Institution[]
  books             Book[]
  
  @@map("users")
}

model Address {
  id                String        @id @default(uuid())
  street            String
  number            String
  reference         String
  city              String
  state             String
  zip               String
  createdAt         DateTime      @default(now())
  institution       Institution[]
  book              Book[]

  @@map("addresses")
}

model Institution {
  id                String        @id @default(uuid()) 
  name              String        @unique
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  address           Address       @relation(fields: [addressId], references: [id])
  addressId         String
  createdAt         DateTime      @default(now())
  books             Book[]

  @@map("institutions")
}

model Book {
  id                String        @id @default(uuid())
  title             String        @unique
  author            String
  edition           String
  year              String
  publishedDate     String        
  quantity          String
  bookCondition     BookCondition
  available         Boolean       @default(true)
  address           Address       @relation(fields: [addressId], references: [id])      
  addressId         String    
  institution       Institution   @relation(fields: [institutionId], references: [id])
  institutionId     String
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  image             Image         @relation(fields: [imageId], references: [id])
  imageId           String
  createdAt         DateTime      @default(now())

  @@map("books")
}

model Image {
  id                String        @id
  url               String
  name              String
  key               String?
  type              String
  size              Int
  createdAt         DateTime      @default(now())
  user              User?
  book              Book?

  @@map("images")
}

model Token {
  id                String        @id @default(uuid())
  token             String        @unique
  isValid           Boolean       @default(true)
  verified          Boolean       @default(false)
  user              User          @relation(fields: [userId], references: [id])
  userId            String       
  createdAt         DateTime      @default(now())

  @@map("tokens")
}

enum Role {
  ADMIN
  USER
  INSTITUTION_ADMIN
}

enum BookCondition {
  NEW
  USED
  DAMAGED
}